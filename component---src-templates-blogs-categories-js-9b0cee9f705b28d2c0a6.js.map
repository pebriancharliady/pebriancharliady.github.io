{"version":3,"sources":["webpack:///./src/templates/blogs/categories.js"],"names":["Categories","edges","data","allMarkdownRemark","title","className","map","node","frontmatter","fields","slug","key","to","fluid","image","childImageSharp","href","imageCredit","target","categories","item","index","length","style","boxShadow","width","height","date","time","dangerouslySetInnerHTML","__html","description","excerpt"],"mappings":"8FAAA,yIAqHeA,UA3GI,SAAC,GAAc,IACxBC,EADuB,EAAXC,KACEC,kBAAdF,MAKR,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKG,MAAM,mBACX,kBAAC,IAAD,KACE,kBAAC,IAAD,KAEE,kBAAC,IAAD,iBAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,0NAGA,kBAAC,IAAD,OAGF,kBAAC,IAAD,CAAiBC,UAAU,WACxBJ,EAAMK,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNH,EAAQG,EAAKC,YAAYJ,OAASG,EAAKE,OAAOC,KACpD,OACE,kBAAC,IAAD,CAAUC,IAAKJ,EAAKE,OAAOC,MACzB,yBAAKL,UAAU,SACb,yBAAKA,UAAU,iBACb,kBAAC,OAAD,CAAMO,GAAIL,EAAKE,OAAOC,MACpB,kBAAC,IAAD,CAAKG,MAAON,EAAKC,YAAYM,MAAMC,gBAAgBF,MAAOT,MAAM,iBAGpE,kBAAC,IAAD,uBAEE,kBAAC,IAAD,CAAWY,KAAMT,EAAKC,YAAYS,YAAaC,OAAO,SAASd,MAAM,gBAClEG,EAAKC,YAAYS,eAKxB,yBAAKZ,UAAU,WACb,gCACE,kBAAC,IAAD,KACE,0BAAMA,UAAU,gBAAgBE,EAAKC,YAAYW,WAAWb,KAAI,SAACc,EAAMC,GAAP,OAC9D,kBAAC,OAAD,CAAMT,GAAE,IAAMQ,EAAQT,IAAKU,GACzB,0BAAMhB,UAAU,4CAAhB,IAA6De,GAC5Db,EAAKC,YAAYW,WAAWG,SAAWD,EAAQ,EAAI,0BAAMhB,UAAU,6BAAhB,OAAyD,OAHjH,MAOF,kBAAC,IAAD,KACE,kBAAC,OAAD,CAAMA,UAAU,eAAekB,MAAO,CAAEC,UAAU,QAAWZ,GAAIL,EAAKE,OAAOC,MAC1EN,IAGL,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,UAAU,4BAA4BoB,MAAM,KAAKC,OAAO,OAClE,0BAAMrB,UAAU,gBAAhB,qBAAkDE,EAAKC,YAAYmB,KAAnE,MAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOtB,UAAU,4BAA4BoB,MAAM,KAAKC,OAAO,OAC/D,0BAAMrB,UAAU,gBAAhB,gBAA6CE,EAAKC,YAAYoB,KAA9D,OAGJ,kBAAC,IAAD,CACEC,wBAAyB,CACvBC,OAAQvB,EAAKC,YAAYuB,aAAexB,EAAKyB,WAGjD,kBAAC,OAAD,CAAMpB,GAAIL,EAAKE,OAAOC,MACpB,kBAAC,IAAD,CAAUL,UAAU,cAApB","file":"component---src-templates-blogs-categories-js-9b0cee9f705b28d2c0a6.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Link, graphql } from \"gatsby\"\r\nimport { Calendar, Clock } from 'react-feather'\r\nimport Img from \"gatsby-image\"\r\nimport CategoriesTags from '../../components/CategoriesTags/categoriesTags';\r\nimport {ContainerLayout, WorkPost, Intro, SubTitle, Title, Text, HeaderIntro, SubText, SmallText, UnderLink, ReadMore} from \"../../components/common\"\r\nimport Layout from \"../../components/layout\"\r\nimport SEO from \"../../components/seo\"\r\n\r\nconst Categories = ({ data }) => {\r\n  const { edges} = data.allMarkdownRemark\r\n  // const tagHeader = `${totalCount} post${\r\n  //   totalCount === 1 ? \"\" : \"s\"\r\n  // } tagged with \"${category}\"`\r\n\r\n  return (\r\n    <Layout> \r\n      <SEO title=\"Blog Home Page\" />\r\n      <Intro>\r\n        <ContainerLayout>\r\n\r\n          <SubTitle>\r\n            Articles\r\n          </SubTitle>\r\n          <HeaderIntro>\r\n            <SubText>\r\n              Articles on front-end design engineering, focused on HTML, CSS, SVG, accessiblity, and everything in between, with practical tips from real projects. Included here are links to articles published on magazines.\r\n            </SubText>\r\n            <CategoriesTags /> \r\n          </HeaderIntro>\r\n\r\n          <ContainerLayout className=\"wrapper\">\r\n            {edges.map(({ node }) => {\r\n              const title = node.frontmatter.title || node.fields.slug\r\n              return (\r\n                <WorkPost key={node.fields.slug}>\r\n                  <div className=\"media\">\r\n                    <div className=\"image-wrapper\">\r\n                      <Link to={node.fields.slug}>\r\n                        <Img fluid={node.frontmatter.image.childImageSharp.fluid} title=\"work title\" />\r\n                      </Link> \r\n                    </div>\r\n                    <SmallText>\r\n                      Image Credits : \r\n                      <UnderLink href={node.frontmatter.imageCredit} target=\"_blank\" title=\"image credit\">\r\n                        {node.frontmatter.imageCredit}\r\n                      </UnderLink>\r\n                    </SmallText>\r\n                  </div>\r\n                  \r\n                  <div className=\"content\">\r\n                    <header>\r\n                      <SmallText> \r\n                        <span className=\"align-middle\">{node.frontmatter.categories.map((item, index) => (\r\n                          <Link to={`/${item}`} key={index}>\r\n                            <span className=\"align-middle text-primary text-underline\">#{item}</span>\r\n                            {node.frontmatter.categories.length !== index + 1 ? <span className=\"align-middle text-primary\"> , </span> : \"\"}\r\n                          </Link>\r\n                        ))} </span>\r\n                      </SmallText>\r\n                      <Title>\r\n                        <Link className=\"text-primary\" style={{ boxShadow: `none` }} to={node.fields.slug}>\r\n                          {title}\r\n                        </Link>\r\n                      </Title>\r\n                      <SmallText> \r\n                        <Calendar className=\"align-middle text-primary\" width=\"18\" height=\"18\" /> \r\n                        <span className=\"align-middle\"> date published : {node.frontmatter.date} </span>\r\n                      </SmallText>\r\n                      <SmallText> \r\n                        <Clock className=\"align-middle text-primary\" width=\"18\" height=\"18\" /> \r\n                        <span className=\"align-middle\"> read time : {node.frontmatter.time} </span>\r\n                      </SmallText>\r\n                    </header>\r\n                    <Text\r\n                      dangerouslySetInnerHTML={{\r\n                        __html: node.frontmatter.description || node.excerpt,\r\n                      }}\r\n                    />\r\n                    <Link to={node.fields.slug}>\r\n                      <ReadMore className=\"lined-link\"> read more &#8594; </ReadMore>\r\n                    </Link>\r\n                  </div>\r\n                </WorkPost>\r\n              )\r\n            })}\r\n          </ContainerLayout>\r\n        </ContainerLayout>\r\n      </Intro>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nCategories.propTypes = {\r\n  pageContext: PropTypes.shape({\r\n    category: PropTypes.string.isRequired,\r\n  }),\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      totalCount: PropTypes.number.isRequired,\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              title: PropTypes.string.isRequired,\r\n            }),\r\n            fields: PropTypes.shape({\r\n              slug: PropTypes.string.isRequired,\r\n            }),\r\n          }),\r\n        }).isRequired\r\n      ),\r\n    }),\r\n  }),\r\n}\r\n\r\nexport default Categories\r\n\r\nexport const pageQuery = graphql`\r\n  query($category: String) {\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { categories: { in: [$category] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            time\r\n            title\r\n            image {\r\n              childImageSharp {\r\n                fluid(maxWidth: 600, quality: 100) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n            categories\r\n            imageCredit\r\n            description\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`"],"sourceRoot":""}